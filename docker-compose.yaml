version: '3.4'

services:
  commands:
    build:
      context: NQNBackend
      dockerfile: Dockerfile
    healthcheck:
      test: "[ \"$$(curl -f http://localhost:8888/health)\" = \"0\" ]"
      retries: 3
      start_period: 30m
    depends_on:
      - elasticsearch
    volumes:
     - lmdbdata:/lmdb
    restart: always
    networks: [app]

  frontend:
    build:
      context: NQNFrontend
      dockerfile: Dockerfile
    restart: always
    networks: [app]

  gateway:
    build:
      context: GatewayHandler
      dockerfile: Dockerfile
    restart: always
    networks: [app]

  status:
    build:
      context: StatusUpdate
      dockerfile: Dockerfile
    restart: always
    networks: [app]

  members:
    build:
      context: MemberKeeper
      dockerfile: Dockerfile
    restart: always
    networks: [app]

  reacts:
    build:
      context: ReactionHandler
      dockerfile: Dockerfile
    restart: always
    networks: [app]

  messages:
    build:
      context: MessageHandler
      dockerfile: Dockerfile
    restart: always
    networks: [app]

  state:
    build:
      context: StateKeeper
      dockerfile: Dockerfile
    restart: always
    networks: [app]

  kibana:
    image: docker.elastic.co/kibana/kibana:6.6.1
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_HOST="0.0.0.0"
      - SERVER_BASEPATH="/kibana"
      - xpack.security.enabled=false
    depends_on:
      - elasticsearch
    ports:
      - "5602:5601"
    restart: always
    networks: [app]

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile.nginx
    restart: always
    ports:
     - "8002:80"
    networks: [app]

  autoheal:
    restart: always
    image: willfarrell/autoheal
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  redis:
    image: bitnami/redis:latest
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG
    volumes:
      - 'redis_data:/bitnami/redis/data'
    restart: always
    networks: [app]

  postgres:
    image: "postgres" # use latest official postgres version
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: always
    networks: [app]

  rabbit:
    image: rabbitmq:3-management-alpine
    volumes:
      - rabbit_data:/var/lib/rabbitmq/
    restart: always
    networks: [app]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.6.1
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - 'path.repo=/usr/share/elasticsearch/backup'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    restart: always
    networks: [app]

networks:
  app:
    ipam:
      driver: default
      config:
      - subnet: 10.0.2.0/24


volumes:
  esdata:
    driver: local
  lmdbdata:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  rabbit_data:
    driver: local
